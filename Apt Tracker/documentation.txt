Joseph Reidell
CS 1501 Project 3
Apartment Tracker

For this project, I decided to implement a double priority queue as two separate heaps. I used the IndexMinPQ and IndexMaxPQ files from the book in order to implement it. The use of two different heaps is good because it will be a quicker runtime rather than using one heap and compare everything.

One heap is called the minimum heap and the second is called the maximum heap. Since the two heaps are being ran at the sometime, it goes through each heap when needed. The worst case runtime ends up becoming O(n log n). When comparing the memory, it barely uses that much memory. One heap uses at least 100 KB. Two heaps will use about 200 KB.

IndexMaxPQ and IndexMinPQ are both from the book we use in class. IndexMaxPQ is able to insert, delete, change, or even check the city for the largest square foot. The methods within the files use helper functions in order to traverse through each key in the priority queue. IndexMinPQ also uses the same exact methods that IndexMaxPQ has. I use the minimum queue to check each apartment whether it is for the price or the square foot. I found it easier to just use one method for one queue because they will both be the same. Any new apartment entered is inserted into both heaps. I have an apartment class file called Apartment that is able to set and get the variables for the street address, apartment number, city, zip code, price, and square foot. It also has methods that compare the prices and square foot in each key. This helps to move the keys around in order to figure out the cheapest priced apartment and the largest square foot apartment. It also uses two constructers, one constructor ask the users for all the information needed for each variable. The other constructor sets the variables to whatever is entered into the method.

AptTracker is obviously the main program used to run everything. Apartment, IndexMinPQ, and IndexMaxPQ are used in the background in order to run everything correctly in the menu. Whichever integer is entered, it will enter into one of seven methods in the main files itself. Each method is pretty self explanatory. If '1' is entered, the program asks the user for the info needed for the apartment. It will the insert it into the both heaps. If '2' is entered, the program asks the user for certain info and then look for the apartment. If the info is found, it will ask the user if they want to update the price, if yes, take the entered price and change it in both heaps. If '3' is entered, the program will ask for certain info and then look for the apartment. If it is found, it will remove that apartment from both heaps.  If '4' is entered, the program will look at the minimum key and display that apartment. The minimum key will be whichever apartment has the lowest price.  If '5' is entered, the program will look at the maximum key and display that apartment. The maximum key will be whichever apartment has the largest square foot.  If '6' is entered, the program will ask the user for a city. It will then look at the minimum key with that city and display that apartment. The minimum key will be whichever apartment has the lowest price. If '7' is entered, the program will ask the user for a city. It will then look at the maximum key with that city and display that apartment. The maximum key will be whichever apartment has the largest square foot. If '8' is entered, the program exits.

Using the code from the book instead of creating queues from scratch made the project a bit easier to design. I deleted a few methods that I didn't believe were needed in the files. A lot of what was needed to make the program work was already created in these files. It made it easier to fine tune everything. Some of the methods, I had to fix to make the file work with the AptTracker and compare/create the queues. Overall, the implementation for this project wasn't too bad except for a few bugs that threw Null exception pointers. However, I figured them out and got everything to work properly.